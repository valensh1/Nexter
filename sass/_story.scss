.story {
    
    &__pictures {
        background-color: $color-primary;
        grid-column: full-start / col-end 4; // Goes to full start right after the sidebar and ends where the story content starts. Notice we end at col-end 4 which is the same as the column grid line col-start 5 specified in the &__content below.
        display: grid;
        grid-template-rows: repeat(6, 1fr); // Want to create a 6x6 grid where the image occupies ~ 67% of the available space.
        grid-template-columns: repeat(6, 1fr); // Want to create a 6x6 grid where the image occupies ~ 67% of the available space.
        align-items: center; // Vertical centering of image on grid. Need this because due to image trying to keep its aspect ratio it doesn't take up full space on grid like we specified in &__img--1 so we needed to align accordingly in a vertical fashion.
        background-image: linear-gradient(rgba($color-primary, .5), rgba($color-primary, .5)), url(../img/back.jpg); // Add image as an overall background with some of our primary color added to it via the linear gradient trick. File path is considering you are starting from the compiled CSS file which is in the CSS folder so you navigate up a level to get to the global application level then go into the img folder and then find the file.
    
    }

    &__img--1 {
        width: 100%;
        grid-row: 2 / 6; // Centering of image on grid. However, image is not taking up the full rows we specified and is smaller because it is trying to maintain its aspect ratio. This will happen with images. If it were anything else other than an image it would take up the space we specified.
        grid-column: 2 / 6; // Centering of image on grid.
        box-shadow: 0 2rem 5rem rgba(#000, .1);
    }

    &__img--2 {
        width: 115%; // Have width here at 115% so the image hangs over on to the other half (content side). After doing this the image moves and hangs over to the other side but you can't see it. So that's why we set a z-index and just put a number of 20 so that it shows on top and we now see it hang over on to the story__content side.
        grid-row: 4 / 6;
        grid-column: 4 / 7;
        z-index: 20;
        box-shadow: 0 2rem 5rem rgba(#000, .2);
    }

    &__content {
        background-color: $color-grey-light-1;
        grid-column: col-start 5 / full-end; // Starts at col-start 5 (same as col-end 4 above just using the other name we gave to column grid line) and goes all the way to the right side of page to full-end.
        padding: 6rem 8vw;

        // GRID WAY TO POSITION CONTENT - FLEXBOX WAY COMMENTED OUT BELOW ALSO WORKS
        display: grid; // Set to grid so we can vertically align content within the container.
        align-content: center; // Aligns all our content in the vertical / column direction which we needed to do to align our h2, h3, paragraph and button here under story__content.
        justify-items: start; // Creates button that starts at beginning of grid cell and doesn't stretch the length of the entire grid cell. By default when you do grid it stretches everything its entire grid cell. We had to use justify-items here because we wanted to position it horizontally / row direction.

        // FLEXBOX WAY TO POSITION CONTENT - THIS IS IF WE DECIDED TO CENTER ITEMS IN THE story__content SECTION USING FLEXBOX
        // display: flex; // Used flexbox to vertically align the items in the container. Since this is a grid item and not a grid container we couldn't use the grid centering properties here.
        // flex-direction: column; // Flexbox default direction is row and we need items to be vertical / column direction.
        // justify-content: center; // Vertically aligns content in center. Remember since we changed the flex-direction to column the main-axis changes to vertical / column which the justify-content property always aligns the main-axis which in this case has now changed to vertical / column direction. In this case, align-items would now center horizontally / row direction.
        // align-items: start; // Button stretches the width of the container because default property is stretch. But we can change this here so we have a smaller button by setting it to start as we don't want a button that stretches the width of the container we want it much smaller.
    }

    &__text {
        font-size: 1.5rem;
        font-style: italic;
        margin-bottom: 4rem;
    }
}